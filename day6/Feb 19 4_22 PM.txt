#include <stdio.h>
#include <stdlib.h>

#define MAX 100

int heap[MAX];
int size = 0;

// Function to heapify
void heapify(int index) {
    int largest = index;
    int left = 2 * index + 1;
    int right = 2 * index + 2;

    if (left < size && heap[left] > heap[largest])
        largest = left;

    if (right < size && heap[right] > heap[largest])
        largest = right;

    if (largest != index) {
        int temp = heap[index];
        heap[index] = heap[largest];
        heap[largest] = temp;
        heapify(largest);
    }
}

// Function to insert data into the max-heap
void insert(int data) {
    if (size >= MAX) {
        printf("Heap overflow. Cannot insert more elements.\n");
        return;
    }

    heap[size] = data;
    int index = size;
    size++;

    // Adjust the heap structure
    while (index > 0 && heap[(index - 1) / 2] < heap[index]) {
        int temp = heap[(index - 1) / 2];
        heap[(index - 1) / 2] = heap[index];
        heap[index] = temp;
        index = (index - 1) / 2;
    }
}

// Function to remove the root element
int removeRoot() {
    if (size == 0) {
        printf("Heap is empty.\n");
        return -1;
    }

    int root = heap[0];
    heap[0] = heap[size - 1];
    size--;
    heapify(0);
    return root;
}

// Function to display the heap
void display() {
    if (size == 0) {
        printf("Heap is empty.\n");
        return;
    }

    printf("Heap: ");
    for (int i = 0; i < size; i++) {
        printf("%d ", heap[i]);
    }
    printf("\n");
}

// Menu-driven program
int main() {
    int choice, data;

    printf("Welcome to the Max-Heap Program!\n");

    do {
        printf("\nMenu:\n");
        printf("1. Insert an element\n");
        printf("2. Remove the root element\n");
        printf("3. Display the heap\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
        case 1:
            printf("Enter the element to insert: ");
            scanf("%d", &data);
            insert(data);
            break;
        case 2:
            data = removeRoot();
            if (data != -1)
                printf("Removed root element: %d\n", data);
            break;
        case 3:
            display();
            break;
        case 4:
            printf("Exiting the program. Goodbye!\n");
            break;
        default:
            printf("Invalid choice! Please try again.\n");
        }
    } while (choice != 4);

    return 0;
}
